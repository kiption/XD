[블렌드 속성 설정]
CreateBlendState(int nPipelineState)
{
	D3D12_BLEND_DESC d3dBlendDesc;
	::ZeroMemory(&d3dBlendDesc, sizeof(D3D12_BLEND_DESC));
	d3dBlendDesc.AlphaToCoverageEnable = TRUE;
	d3dBlendDesc.IndependentBlendEnable = FALSE;
	d3dBlendDesc.RenderTarget[0].BlendEnable = TRUE;
	d3dBlendDesc.RenderTarget[0].LogicOpEnable = FALSE;
	d3dBlendDesc.RenderTarget[0].SrcBlend = D3D12_BLEND_SRC_ALPHA;
	d3dBlendDesc.RenderTarget[0].DestBlend = D3D12_BLEND_INV_SRC_ALPHA;
	d3dBlendDesc.RenderTarget[0].BlendOp = D3D12_BLEND_OP_ADD;
	d3dBlendDesc.RenderTarget[0].SrcBlendAlpha = D3D12_BLEND_ONE;
	d3dBlendDesc.RenderTarget[0].DestBlendAlpha = D3D12_BLEND_ZERO;
	d3dBlendDesc.RenderTarget[0].BlendOpAlpha = D3D12_BLEND_OP_ADD;
	d3dBlendDesc.RenderTarget[0].LogicOp = D3D12_LOGIC_OP_NOOP;
	d3dBlendDesc.RenderTarget[0].RenderTargetWriteMask = D3D12_COLOR_WRITE_ENABLE_ALL;

	return(d3dBlendDesc);
}
[#1빌보드활용 - 회복구역 표시]
void HealPackBillboardShader::BuildObjects(ID3D12Device* pd3dDevice, ID3D12GraphicsCommandList* pd3dCommandList, ID3D12RootSignature* pd3dGraphicsRootSignature, void* pContext)
{
	Texture* ppSpriteTextures = new Texture(1, RESOURCE_TEXTURE2D, 0, 1);
	ppSpriteTextures->LoadTextureFromDDSFile(pd3dDevice, pd3dCommandList, L"Billboard/HealArea.dds", RESOURCE_TEXTURE2D, 0);
	CMaterial* pSpriteMaterial = new CMaterial(1);
	pSpriteMaterial->SetTexture(ppSpriteTextures, 0);
	CTexturedRectMesh* pSpriteMesh;
	pSpriteMesh = new CTexturedRectMesh(pd3dDevice, pd3dCommandList, 2.0, 2.0, 0.0f, 0.0f, 0.0f, 0.0f);

	m_nObjects = HEAL_EFFECTS_COUNT;
	CreateShaderVariables(pd3dDevice, pd3dCommandList);
	MainGameScene::CreateSRVs(pd3dDevice, ppSpriteTextures, 0, 15);
	m_ppObjects = new GameObjectMgr * [m_nObjects];
	CBillboardObject** ppParticleObject = new CBillboardObject * [m_nObjects];
	for (int j = 0; j < m_nObjects; j++)
	{
		ppParticleObject[j] = new CBillboardObject(pd3dDevice, pd3dCommandList, pd3dGraphicsRootSignature);
		ppParticleObject[j]->SetMesh(pSpriteMesh);
		ppParticleObject[j]->SetMaterial(0, pSpriteMaterial);
		m_ppObjects[j] = ppParticleObject[j];
	}
	for (int i = 0; i < HEAL_EFFECTS_COUNT; i++) XMStoreFloat3(&m_pxmf3SphereVectors[i], RandomHealEffectDir());
}

void HealPackBillboardShader::AnimateObjects(float fTimeElapsed)
{

	if (m_bActive == true)
	{
		m_fElapsedTimes += fTimeElapsed * 2.0f;
		if (m_fElapsedTimes <= m_fDuration)
		{
			for (int i = 0; i < HEAL_EFFECTS_COUNT; i++)
			{
				XMFLOAT3 gravity = XMFLOAT3(0.0, RandomBillboard(1.0f, 9.0f), 0.0);
				m_fExplosionSpeed = RandomBillboard(2.0f, 8.0f);
				m_pxmf4x4Transforms[i] = Matrix4x4::Identity();
				m_pxmf4x4Transforms[i]._41 = HealParticlePosition.x + m_pxmf3SphereVectors[i].x * m_fExplosionSpeed * m_fElapsedTimes + 0.5f * gravity.x *m_fElapsedTimes* m_fElapsedTimes;
				m_pxmf4x4Transforms[i]._42 = HealParticlePosition.y + m_pxmf3SphereVectors[i].y * m_fExplosionSpeed * m_fElapsedTimes + 0.5f * gravity.y * m_fElapsedTimes * m_fElapsedTimes;
				m_pxmf4x4Transforms[i]._43 = HealParticlePosition.z + m_pxmf3SphereVectors[i].z * m_fExplosionSpeed * m_fElapsedTimes + 0.5f * gravity.z *m_fElapsedTimes* m_fElapsedTimes;
				m_pxmf4x4Transforms[i] = Matrix4x4::Multiply(Matrix4x4::RotationAxis(m_pxmf3SphereVectors[i], m_fExplosionRotation * m_fElapsedTimes), m_pxmf4x4Transforms[i]);

				m_ppObjects[i]->m_xmf4x4ToParent._41 = m_pxmf4x4Transforms[i]._41;
				m_ppObjects[i]->m_xmf4x4ToParent._42 = m_pxmf4x4Transforms[i]._42;
				m_ppObjects[i]->m_xmf4x4ToParent._43 = m_pxmf4x4Transforms[i]._43;
			}
		}
		else
		{
			m_fElapsedTimes = 0.0f;
		}
	}
	BillboardShader::AnimateObjects(fTimeElapsed);
}



[#2빌보드활용 - 헬기피격시 불꽃스파크]
void SparkBillboard::BuildObjects(ID3D12Device* pd3dDevice, ID3D12GraphicsCommandList* pd3dCommandList, ID3D12RootSignature* pd3dGraphicsRootSignature, void* pContext)
{
	Texture* ppSpriteTextures = new Texture(1, RESOURCE_TEXTURE2D, 0, 1);
	ppSpriteTextures->LoadTextureFromDDSFile(pd3dDevice, pd3dCommandList, L"Billboard/Overheat.dds", RESOURCE_TEXTURE2D, 0);
	CMaterial* pSpriteMaterial = new CMaterial(1);
	pSpriteMaterial->SetTexture(ppSpriteTextures, 0);
	CTexturedRectMesh* pSpriteMesh;
	pSpriteMesh = new CTexturedRectMesh(pd3dDevice, pd3dCommandList, 0.4f, 0.9f, 0.0f, 0.0f, 0.0f, 0.0f);
	m_nObjects = EXPLOSION_SPARK;
	m_ppObjects = new GameObjectMgr * [m_nObjects];
	CreateShaderVariables(pd3dDevice, pd3dCommandList);
	MainGameScene::CreateSRVs(pd3dDevice, ppSpriteTextures, 0, 15);

	CBillboardObject** pSparkObject = new CBillboardObject * [m_nObjects];
	for (int j = 0; j < m_nObjects; j++) {
		pSparkObject[j] = new CBillboardObject(pd3dDevice, pd3dCommandList, pd3dGraphicsRootSignature);
		pSparkObject[j]->SetMesh(pSpriteMesh);
		pSparkObject[j]->SetMaterial(0, pSpriteMaterial);
		pSparkObject[j]->SetPosition(XMFLOAT3(330.0, 40.0, -230.0));
		m_ppObjects[j] = pSparkObject[j];
	}

	for (int i = 0; i < EXPLOSION_SPARK; i++) XMStoreFloat3(&m_pxmf3SphereVectors[i], RandomUnitVectorOnSphereBillboard());
}

void SparkBillboard::Render(ID3D12GraphicsCommandList* pd3dCommandList, CCamera* pCamera, int nPipelineState)
{
	if (m_bActive == true) {
		PlayerMgr* pPlayer = pCamera->GetPlayer();
		XMFLOAT3 xmf3PlayerPosition = pPlayer->GetPosition();
		XMFLOAT3 xmf3CameraPosition = pCamera->GetPosition();
		XMFLOAT3 xmf3PlayerLook = pPlayer->GetLookVector();
		XMFLOAT3 xmf3Position = Vector3::Add(xmf3PlayerPosition, Vector3::ScalarProduct(xmf3PlayerLook, 0.0f, false));

		for (int j = 0; j < m_nObjects; j++) {
			if (m_ppObjects[j])m_ppObjects[j]->SetLookAt(xmf3CameraPosition, XMFLOAT3(0.0f, 1.0, 1.0f));
		}
		BillboardShader::Render(pd3dCommandList, pCamera, 0);
	}
}

void SparkBillboard::AnimateObjects(float fTimeElapsed)
{
	if (m_bActive == true)
	{
		XMFLOAT3 gravity = XMFLOAT3(8.0, -9.8f, +5.5);
		m_fElapsedTimes += fTimeElapsed * 5.0f;
		if (m_fElapsedTimes <= m_fDuration) {
			for (int i = 0; i < EXPLOSION_SPARK; i++) {
				gravity = XMFLOAT3(0, -RandomBillboard(2.0f, 3.0f), 0);
				m_fExplosionSpeed = RandomBillboard(2.0f, 10.0f);

				m_pxmf4x4Transforms[i] = Matrix4x4::Identity();
				m_pxmf4x4Transforms[i]._41 = ParticlePosition.x + m_pxmf3SphereVectors[i].x * m_fExplosionSpeed * m_fElapsedTimes + 0.5f * gravity.x * m_fElapsedTimes * m_fElapsedTimes;
				m_pxmf4x4Transforms[i]._42 = ParticlePosition.y + m_pxmf3SphereVectors[i].y * m_fExplosionSpeed * m_fElapsedTimes + 0.5f * gravity.y * m_fElapsedTimes * m_fElapsedTimes;
				m_pxmf4x4Transforms[i]._43 = ParticlePosition.z + m_pxmf3SphereVectors[i].z * m_fExplosionSpeed * m_fElapsedTimes + 0.5f * gravity.z * m_fElapsedTimes * m_fElapsedTimes;
				m_pxmf4x4Transforms[i] = Matrix4x4::Multiply(Matrix4x4::RotationAxis(m_pxmf3SphereVectors[i], m_fExplosionRotation * m_fElapsedTimes), m_pxmf4x4Transforms[i]);

				m_ppObjects[i]->m_xmf4x4ToParent._41 = m_pxmf4x4Transforms[i]._41;
				m_ppObjects[i]->m_xmf4x4ToParent._42 = m_pxmf4x4Transforms[i]._42;
				m_ppObjects[i]->m_xmf4x4ToParent._43 = m_pxmf4x4Transforms[i]._43;
			}
		}
		else {
			m_bActive = false;
			m_fElapsedTimes = 0.0f;
		}
	}
	BillboardShader::AnimateObjects(fTimeElapsed);
}


[#3빌보드활용 - 사격 시 총구화염]
void MuzzleFrameBillboard::BuildObjects(ID3D12Device* pd3dDevice, ID3D12GraphicsCommandList* pd3dCommandList, ID3D12RootSignature* pd3dGraphicsRootSignature, void* pContext)
{
	Texture* ppSpriteTextures = new Texture(1, RESOURCE_TEXTURE2D, 0, 1);
	ppSpriteTextures->LoadTextureFromDDSFile(pd3dDevice, pd3dCommandList, L"Billboard/MuzzleFlame.dds", RESOURCE_TEXTURE2D, 0);


	CMaterial* pSpriteMaterial = new CMaterial(1);

	pSpriteMaterial->SetTexture(ppSpriteTextures, 0);

	CTexturedRectMesh* pSpriteMesh;
	pSpriteMesh = new CTexturedRectMesh(pd3dDevice, pd3dCommandList, 1.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f);

	m_nObjects = 1;
	CreateShaderVariables(pd3dDevice, pd3dCommandList);
	MainGameScene::CreateSRVs(pd3dDevice, ppSpriteTextures, 0, 15);

	m_ppObjects = new GameObjectMgr * [m_nObjects];
	CResponeObject** pResponObject = new CResponeObject * [m_nObjects];
	for (int j = 0; j < m_nObjects; j++)
	{
		pResponObject[j] = new CResponeObject(pd3dDevice, pd3dCommandList, pd3dGraphicsRootSignature);
		pResponObject[j]->SetMesh(pSpriteMesh);
		pResponObject[j]->SetMaterial(0, pSpriteMaterial);
		m_ppObjects[j] = pResponObject[j];
	}


}
void MuzzleFrameBillboard::Render(ID3D12GraphicsCommandList* pd3dCommandList, CCamera* pCamera, int nPipelineState, XMFLOAT3 Look, XMFLOAT3 Position)
{
	if (m_bShotActive == true)
	{

		PlayerMgr* pPlayer = pCamera->GetPlayer();
		XMFLOAT3 CameraPosition = pCamera->GetPosition();
		XMFLOAT3 CameraLook = pCamera->GetLookVector();
		XMFLOAT3 xmf3PlayerPosition = pPlayer->GetPosition();
		XMFLOAT3 xmf3PlayerLook = pPlayer->GetLookVector();
		XMFLOAT3 xmf3Position = Vector3::Add(Position, Vector3::ScalarProduct(CameraLook, 3.0f, false));
		xmf3Position.y += 0.2f;
		for (int j = 0; j < m_nObjects; j++) {
			if (m_ppObjects[j])m_ppObjects[j]->SetPosition(xmf3Position);
			if (m_ppObjects[j])m_ppObjects[j]->SetLookAt(CameraPosition, XMFLOAT3(0.0f, 1.0, 0.0f));
			BillboardShader::Render(pd3dCommandList, pCamera, 0);
		}
	}
}