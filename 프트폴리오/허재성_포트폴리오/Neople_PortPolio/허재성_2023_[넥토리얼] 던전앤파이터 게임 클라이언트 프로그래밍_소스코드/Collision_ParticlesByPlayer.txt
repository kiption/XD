[공중 Npc 사망시 기체 파편의 이동 로직]
void FallDown(float fTimeElapsed)
{
	XMFLOAT3 gravity = XMFLOAT3(0.0, -5.5, 0);
	m_fElapsedTimes += fTimeElapsed * 1.1f;

	float FallingMaxHeight = -17.5f;
	float staticValue = 7.3f;
	float staticValueZ = 6.3f;
	XMVECTOR staticDir1 = XMVector3Normalize(XMVECTOR(XMVectorSet(0.95, -0.5, 0.95, 0.0)));
	XMVECTOR staticDir2 = XMVector3Normalize(XMVECTOR(XMVectorSet(-0.95, -0.5, 0.85, 0.0)));
	XMVECTOR staticDir3 = XMVector3Normalize(XMVECTOR(XMVectorSet(0.95, -0.5, 0.95, 0.0)));
	XMVECTOR staticDir4 = XMVector3Normalize(XMVECTOR(XMVectorSet(0.95, -0.5, -0.95, 0.0)));
	XMVECTOR staticDir5 = XMVector3Normalize(XMVECTOR(XMVectorSet(-0.95, -0.5, -0.85, 0.0)));
	XMVECTOR staticDir6 = XMVector3Normalize(XMVECTOR(XMVectorSet(0.95, -0.5, 0.95, 0.0)));
	XMVECTOR staticDir7 = XMVector3Normalize(XMVECTOR(XMVectorSet(-0.93, -0.5, -0.95, 0.0)));
	for (int i = 0; i < 2; i++)XMStoreFloat3(&m_pxmf3SphereVectors[i], staticDir1);
	for (int i = 2; i < 4; i++)XMStoreFloat3(&m_pxmf3SphereVectors[i], staticDir2);
	for (int i = 4; i < 5; i++)XMStoreFloat3(&m_pxmf3SphereVectors[i], staticDir3);
	for (int i = 5; i < 6; i++)XMStoreFloat3(&m_pxmf3SphereVectors[i], staticDir4);
	for (int i = 6; i < 7; i++)XMStoreFloat3(&m_pxmf3SphereVectors[i], staticDir5);
	for (int i = 7; i < 9; i++)XMStoreFloat3(&m_pxmf3SphereVectors[i], staticDir6);
	for (int i = 9; i < EXPLOSION_HELICOPTER; i++)XMStoreFloat3(&m_pxmf3SphereVectors[i], staticDir7);

	float rotrowValue = XMConvertToRadians(360.0f * 0.4) * fTimeElapsed;
	XMMATRIX xmmtxRotateRow = XMMatrixRotationRollPitchYaw(rotrowValue, rotrowValue, rotrowValue);
	float rotFastValue = XMConvertToRadians(360.0f * 1.8) * fTimeElapsed;
	XMMATRIX xmmtxRotateFast = XMMatrixRotationRollPitchYaw(rotFastValue, rotFastValue, rotFastValue);

	if (m_FrameTailRotor->m_xmf4x4ToParent._42 > FallingMaxHeight) {
		float rotValue = XMConvertToRadians(360.0f * 1.8) * fTimeElapsed;
		XMMATRIX xmmtxRotate = XMMatrixRotationRollPitchYaw(rotValue, rotValue, rotValue);
		m_FrameTailRotor->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[0].x * staticValue * fTimeElapsed;
		m_FrameTailRotor->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[0].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
		m_FrameTailRotor->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[0].z * staticValueZ * fTimeElapsed;
		m_FrameTailRotor->m_xmf4x4ToParent = Matrix4x4::Multiply(xmmtxRotate, m_FrameTailRotor->m_xmf4x4ToParent);
	}
	if (m_FrameTopRotor->m_xmf4x4ToParent._42 > FallingMaxHeight) {
		float rotValue = XMConvertToRadians(360.0f * 0.4) * fTimeElapsed;
		XMMATRIX xmmtxRotate = XMMatrixRotationRollPitchYaw(rotValue, rotValue, rotValue);
		m_FrameTopRotor->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[1].x * staticValue * fTimeElapsed;
		m_FrameTopRotor->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[1].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
		m_FrameTopRotor->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[1].z * staticValueZ * fTimeElapsed;
		m_FrameTopRotor->m_xmf4x4ToParent = Matrix4x4::Multiply(xmmtxRotate, m_FrameTopRotor->m_xmf4x4ToParent);
	}
	if (m_FrameCleanser_2->m_xmf4x4ToParent._42 > FallingMaxHeight) {
		float rotValue = XMConvertToRadians(360.0f * 1.8) * fTimeElapsed;
		XMMATRIX xmmtxRotate = XMMatrixRotationRollPitchYaw(rotValue, rotValue, rotValue);
		m_FrameCleanser_2->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[5].x * staticValue * fTimeElapsed;
		m_FrameCleanser_2->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[5].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
		m_FrameCleanser_2->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[5].z * staticValueZ * fTimeElapsed;
		m_FrameCleanser_2->m_xmf4x4ToParent = Matrix4x4::Multiply(xmmtxRotate, m_FrameCleanser_2->m_xmf4x4ToParent);
	}
	if (m_FrameHeliBody->m_xmf4x4ToParent._42 > FallingMaxHeight) {
		float rotValue = XMConvertToRadians(360.0f * 0.4) * fTimeElapsed;
		XMMATRIX xmmtxRotate = XMMatrixRotationRollPitchYaw(rotValue, rotValue, rotValue);
		m_FrameHeliBody->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[6].x * staticValue * fTimeElapsed;
		m_FrameHeliBody->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[6].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;		//
		m_FrameHeliBody->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[6].z * staticValueZ * fTimeElapsed;
		m_FrameHeliBody->m_xmf4x4ToParent = Matrix4x4::Multiply(xmmtxRotate, m_FrameHeliBody->m_xmf4x4ToParent);
	}
	if (m_FrameRightDoor->m_xmf4x4ToParent._42 > FallingMaxHeight) {
		float rotValue = XMConvertToRadians(360.0f * 2.8) * fTimeElapsed;
		XMMATRIX xmmtxRotate = XMMatrixRotationRollPitchYaw(rotValue, rotValue, rotValue);
		m_FrameRightDoor->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[7].x * staticValue * fTimeElapsed;
		m_FrameRightDoor->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[7].z * staticValueZ * fTimeElapsed;
		m_FrameRightDoor->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[7].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
		m_FrameRightDoor->m_xmf4x4ToParent = Matrix4x4::Multiply(xmmtxRotate, m_FrameRightDoor->m_xmf4x4ToParent);
	}
	if (m_FrameLeftDoor->m_xmf4x4ToParent._42 > FallingMaxHeight) {
		float rotValue = XMConvertToRadians(360.0f * 0.4) * fTimeElapsed;
		XMMATRIX xmmtxRotate = XMMatrixRotationRollPitchYaw(rotValue, rotValue, rotValue);
		m_FrameLeftDoor->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[9].x * staticValue * fTimeElapsed;
		m_FrameLeftDoor->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[9].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
		m_FrameLeftDoor->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[9].z * staticValueZ * fTimeElapsed;
		m_FrameLeftDoor->m_xmf4x4ToParent = Matrix4x4::Multiply(xmmtxRotate, m_FrameLeftDoor->m_xmf4x4ToParent);
	}
	if (m_FrameRighttyre->m_xmf4x4ToParent._42 > FallingMaxHeight) {
		m_FrameRighttyre->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[10].x * staticValue * fTimeElapsed;
		m_FrameRighttyre->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[10].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
		m_FrameRighttyre->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[10].z * staticValueZ * fTimeElapsed;
	}
	if (m_FrameBacktyre->m_xmf4x4ToParent._42 > FallingMaxHeight) {
		m_FrameBacktyre->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[11].x * staticValue * fTimeElapsed;
		m_FrameBacktyre->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[11].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
		m_FrameBacktyre->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[11].z * staticValueZ * fTimeElapsed;
	}
	m_FrameBackDoor->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[8].x * staticValue * fTimeElapsed;
	m_FrameBackDoor->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[8].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
	m_FrameBackDoor->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[8].z * staticValueZ * fTimeElapsed;
	m_FrameBackDoor->m_xmf4x4ToParent = Matrix4x4::Multiply(xmmtxRotateRow, m_FrameBackDoor->m_xmf4x4ToParent);
	
	m_FrameHeliglass->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[2].x * staticValue * fTimeElapsed;
	m_FrameHeliglass->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[2].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
	m_FrameHeliglass->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[2].z * staticValueZ * fTimeElapsed;
	m_FrameHeliglass->m_xmf4x4ToParent = Matrix4x4::Multiply(xmmtxRotateRow, m_FrameHeliglass->m_xmf4x4ToParent);


	m_FrameCleanse->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[3].x * staticValue * fTimeElapsed;
	m_FrameCleanse->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[3].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
	m_FrameCleanse->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[3].z * staticValueZ * fTimeElapsed;
	m_FrameCleanse->m_xmf4x4ToParent = Matrix4x4::Multiply(xmmtxRotateFast, m_FrameCleanse->m_xmf4x4ToParent);


	m_FrameLefttyre->m_xmf4x4ToParent._41 += m_pxmf3SphereVectors[4].x * staticValue * fTimeElapsed;
	m_FrameLefttyre->m_xmf4x4ToParent._42 += m_pxmf3SphereVectors[4].y * staticValue * fTimeElapsed + 0.5f * gravity.y * fTimeElapsed * fTimeElapsed;
	m_FrameLefttyre->m_xmf4x4ToParent._43 += m_pxmf3SphereVectors[4].z * staticValueZ * fTimeElapsed;
	m_FrameLefttyre->m_xmf4x4ToParent = Matrix4x4::Multiply(xmmtxRotateFast, m_FrameLefttyre->m_xmf4x4ToParent);

	GameObjectMgr::Animate(fTimeElapsed);
}


[공중 Npc의 분해된 기체들과 플레이어들의 충돌]
void HeliParticlesByPlayerCollisionResult()
{

	XMFLOAT4 Oriented = XMFLOAT4(0, 0, 0, 1);
	XMFLOAT3 HumanPos = XMFLOAT3(((CHumanPlayer*)m_ppShaders[0]->m_ppObjects[1])->GetPosition());
	XMFLOAT3 HumanSize = XMFLOAT3(3.0, 5.0, 3.0);
	XMFLOAT3 HeliPos = XMFLOAT3(((HeliPlayer*)m_ppShaders[0]->m_ppObjects[43])->GetPosition());
	XMFLOAT3 HeliSize = XMFLOAT3(8.0, 8.0, 10.0);
	BoundingOrientedBox HeliPlayeroobb = BoundingOrientedBox(HeliPos, HeliSize, Oriented);
	BoundingOrientedBox HumanPlayeroobb = BoundingOrientedBox(HumanPos, HumanSize, Oriented);
	BoundingOrientedBox Particleoobb[12]{ BoundingOrientedBox(XMFLOAT3(0,0,0), XMFLOAT3(0,0,0), Oriented) };

	// 공중 Npc의 Index
	for (int i = 12; i < 17; i++)
	{
		BoundingOrientedBox Particleoobb[0] = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pFrameFragObj1->GetPosition(), XMFLOAT3(3.0, 3.0, 3.0), Oriented);
		BoundingOrientedBox P2 = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pFrameFragObj2->GetPosition(), XMFLOAT3(3.0, 3.0, 3.0), Oriented);
		BoundingOrientedBox P3 = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pFrameFragObj3->GetPosition(), XMFLOAT3(3.0, 3.0, 3.0), Oriented);
		BoundingOrientedBox P4 = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pFrameFragObj4->GetPosition(), XMFLOAT3(3.0, 3.0, 3.0), Oriented);
		BoundingOrientedBox P5 = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pFrameFragObj5->GetPosition(), XMFLOAT3(5.0, 5.0, 5.0), Oriented);
		BoundingOrientedBox P6 = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pFrameFragObj6->GetPosition(), XMFLOAT3(3.0, 3.0, 3.0), Oriented);
		BoundingOrientedBox P7 = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pFrameFragObj7->GetPosition(), XMFLOAT3(3.0, 3.0, 3.0), Oriented);
		BoundingOrientedBox P8 = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pFrameFragObj8->GetPosition(), XMFLOAT3(3.0, 3.0, 3.0), Oriented);
		BoundingOrientedBox P9 = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pFrameFragObj9->GetPosition(), XMFLOAT3(3.0, 3.0, 3.0), Oriented);
		BoundingOrientedBox P10 = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pTailRotorFrame->GetPosition(), XMFLOAT3(3.0, 3.0, 3.0), Oriented);
		BoundingOrientedBox P11 = BoundingOrientedBox(((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_pMainRotorFrame->GetPosition(), XMFLOAT3(3.0, 3.0, 3.0), Oriented);

		if (HeliPlayeroobb.Intersects(P1) || HeliPlayeroobb.Intersects(P2) || HeliPlayeroobb.Intersects(P3) || HeliPlayeroobb.Intersects(P4)
			|| HeliPlayeroobb.Intersects(P5) || HeliPlayeroobb.Intersects(P6) || HeliPlayeroobb.Intersects(P7) || HeliPlayeroobb.Intersects(P8)
			|| HeliPlayeroobb.Intersects(P9) || HeliPlayeroobb.Intersects(P10) || HeliPlayeroobb.Intersects(P11))
		{
			m_bHeliParticleCollisionCheck = true;
		}

		if (HumanPlayeroobb.Intersects(P1) || HumanPlayeroobb.Intersects(P2) || HumanPlayeroobb.Intersects(P3) || HumanPlayeroobb.Intersects(P4)
			|| HumanPlayeroobb.Intersects(P5) || HumanPlayeroobb.Intersects(P6) || HumanPlayeroobb.Intersects(P7) || HumanPlayeroobb.Intersects(P8)
			|| HumanPlayeroobb.Intersects(P9) || HumanPlayeroobb.Intersects(P10) || HumanPlayeroobb.Intersects(P11))
		{
			m_bHumanParticleCollisionCheck = true;
		}

		if (((CHelicopterObjects*)m_ppShaders[0]->m_ppObjects[i])->m_bPartitionfalldownEnd == true)
		{
			m_bPartitionEnd = true;
		}
	}
}