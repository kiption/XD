[PLAYER HUMAN]
CHumanPlayer::CHumanPlayer(ID3D12Device* pd3dDevice, ID3D12GraphicsCommandList* pd3dCommandList, ID3D12RootSignature* pd3dGraphicsRootSignature, CLoadedModelInfo* playermodel, void* pContext)
{
	m_pCamera = ChangeCamera(THIRD_PERSON_CAMERA, 0.0f);

	SetChild(playermodel->m_pModelRootObject, true);
	playermodel->m_pModelRootObject->SetCurScene(INGAME_SCENE);
	m_pBulletFindFrame = playermodel->m_pModelRootObject->FindFrame("Rifle__1_");
	m_pHeadFindFrame = playermodel->m_pModelRootObject->FindFrame("head");

	m_pSkinnedAnimationController = new CAnimationController(pd3dDevice, pd3dCommandList, ANIMATIONTRACTS_HUMANPLAYER, playermodel);
	m_pSkinnedAnimationController->SetTrackEnable(0, true);

	for (int i = 0; i < ANIMATIONTRACTS_HUMANPLAYER; i++) {
		m_pSkinnedAnimationController->SetTrackAnimationSet(i,i);
		m_pSkinnedAnimationController->SetTrackEnable(0, true);
		if (i != 0)m_pSkinnedAnimationController->SetTrackEnable(i, false);
	}
	
	m_pSkinnedAnimationController->SetCallbackKeys(1, 2);
	m_pSkinnedAnimationController->SetCallbackKeys(2, 2);
	m_pSkinnedAnimationController->SetCallbackKeys(3, 2);
	m_pSkinnedAnimationController->SetCallbackKeys(4, 2);


#ifdef _WITH_SOUND_RESOURCE
	m_pSkinnedAnimationController->SetCallbackKey(0, 0, 0.1f, _T("Footstep01"));
	m_pSkinnedAnimationController->SetCallbackKey(1, 1, 0.5f, _T("Footstep02"));
	m_pSkinnedAnimationController->SetCallbackKey(3, 0, 0.9f, _T("Footstep03"));
#else
	m_pSkinnedAnimationController->SetCallbackKey(1, 0, 0.0f, _T("Sound/Footstep01.wav"));
	m_pSkinnedAnimationController->SetCallbackKey(1, 1, 0.4f, _T("Sound/Footstep01.wav"));
	m_pSkinnedAnimationController->SetCallbackKey(2, 0, 0.0f, _T("Sound/Footstep01.wav"));
	m_pSkinnedAnimationController->SetCallbackKey(2, 1, 0.4f, _T("Sound/Footstep01.wav"));
	m_pSkinnedAnimationController->SetCallbackKey(3, 0, 0.0f, _T("Sound/Footstep03.wav"));
	m_pSkinnedAnimationController->SetCallbackKey(3, 1, 0.4f, _T("Sound/Footstep03.wav"));
	m_pSkinnedAnimationController->SetCallbackKey(4, 0, 0.0f, _T("Sound/Footstep03.wav"));
	m_pSkinnedAnimationController->SetCallbackKey(4, 1, 0.4f, _T("Sound/Footstep03.wav"));
#endif
	CAnimationCallbackHandler* pAnimationCallbackHandler = new CSoundCallbackHandler();
	m_pSkinnedAnimationController->SetAnimationCallbackHandler(1, pAnimationCallbackHandler);
	pAnimationCallbackHandler = new CSoundCallbackHandler();
	m_pSkinnedAnimationController->SetAnimationCallbackHandler(2, pAnimationCallbackHandler);
	pAnimationCallbackHandler = new CSoundCallbackHandler();
	m_pSkinnedAnimationController->SetAnimationCallbackHandler(3, pAnimationCallbackHandler);
	pAnimationCallbackHandler = new CSoundCallbackHandler();
	m_pSkinnedAnimationController->SetAnimationCallbackHandler(4, pAnimationCallbackHandler);

	SetPlayerUpdatedContext(pContext);
	SetCameraUpdatedContext(pContext);
	CreateShaderVariables(pd3dDevice, pd3dCommandList);
}

[NPC HUMAN]
CSoldiarNpcObjects::CSoldiarNpcObjects(ID3D12Device* pd3dDevice, ID3D12GraphicsCommandList* pd3dCommandList, ID3D12RootSignature* pd3dGraphicsRootSignature, CLoadedModelInfo* pModel, int nAnimationTracks) : GameObjectMgr(21)
{
	SetChild(pModel->m_pModelRootObject, true);
	pModel->m_pModelRootObject->SetCurScene(INGAME_SCENE);

	m_pSkinnedAnimationController = new CAnimationController(pd3dDevice, pd3dCommandList, ANIMATIONTRACTS_NPCPLAYER, pModel);

	for (int i = 0; i < ANIMATIONTRACTS_NPCPLAYER; i++) {
		m_pSkinnedAnimationController->SetTrackAnimationSet(i, i);
		m_pSkinnedAnimationController->SetTrackEnable(0, true);
		if(i!=0)m_pSkinnedAnimationController->SetTrackEnable(i, false);
	}

	CreateShaderVariables(pd3dDevice, pd3dCommandList);

}